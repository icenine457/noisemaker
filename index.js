var awsIot = require('aws-iot-device-sdk');var say = require('say')var player = require('play-sound')();var s3 = require('s3');var fs = require('fs');var path = require('path');//// Replace the values of '<YourUniqueClientIdentifier>' and '<YourAWSRegion>'// with a unique client identifier and the AWS region you created your// certificate in (e.g. 'us-east-1').  NOTE: client identifiers must be// unique within your AWS account; if a client attempts to connect with a// client identifier which is already in use, the existing connection will// be terminated.var awsRegion = 'us-east-1';var device = awsIot.device({   keyPath: path.resolve(__dirname, 'certificates', '1fcf9bcb89-private.pem.key'),  certPath: path.resolve(__dirname, 'certificates', '1fcf9bcb89-certificate.pem.crt'),    caPath: path.resolve(__dirname, 'certificates', 'root-CA.crt'),  clientId: 'soundreceiver',    region: awsRegion,});//// Device is an instance returned by mqtt.Client(), see mqtt.js for full// documentation.//var playTopic = 'noisemaker-play-audio';var client = s3.createClient({  s3Options: {    region: awsRegion,    sslEnabled: true   },});var s3Params = {  localDir: path.resolve(__dirname, "files"),  deleteRemoved: true,  s3Params: {    Bucket: "fng-r1",  },};device.on('connect', function() {  var downloader = client.downloadDir(s3Params);  downloader.on('error', function(err) {    console.error("unable to download:", err.stack);  });  downloader.on('end', function() {    console.log('download complete')    console.log('connect');    say.speak("Connected. I'm ready to make with the laughs.")    device.subscribe(playTopic);  });  device  .on('message', function(topic, payload) {    console.log('message received');    if (topic !== playTopic) {      return;    }    fs.readdir(s3Params.localDir, function(err, files) {      var file = path.resolve(s3Params.localDir, files[Math.floor(Math.random()*files.length)]);      player.play(file, function(err) {        if (err) {          say.speak('Something went wrong');          console.log(err)        }      })    })  });});